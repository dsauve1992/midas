name: CI/CD

on:
  push:
    branches:
     - master

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Load & Cache Dependencies
        uses: ./.github/actions/cached-deps

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build React App
        working-directory: ./packages/frontend
        env:
          VITE_BACKEND_URL: https://${{ vars.EC2_HOST }}
          VITE_AUTH0_CLIENT_ID: ${{ vars.AUTH0_CLIENT_ID }}
          VITE_AUTH0_DOMAIN: ${{ vars.AUTH0_DOMAIN }}
        run: yarn build
      - name: Deploy app build to S3 bucket
        working-directory: ./packages/frontend
        run: aws s3 sync ./dist/ s3://${{vars.FRONTEND_STORAGE_S3_BUCKET_NAME }} --acl public-read --delete

  backend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load & Cache Dependencies
        uses: ./.github/actions/cached-deps

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./packages/backend
          file: ./packages/backend/production.Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/midas-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  backend-db-migrate:
    needs: backend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Load & Cache Dependencies
        uses: ./.github/actions/cached-deps

      - name: Knex migrate latest
        working-directory: ./packages/backend
        env:
          DATABASE_CONNECTION_STRING: ${{ secrets.DATABASE_CONNECTION_STRING }}
        run: yarn db:migrate-latest

  backend-deploy:
    needs: backend-db-migrate
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          IMAGE_NAME: midas-backend
          IMAGE_TAG: latest
        with:
          host: ${{ vars.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKER_USERNAME,IMAGE_NAME,IMAGE_TAG
          script: |
            if [ "$(docker ps -q)" ]; then
              docker stop $(docker ps -q)
            else
              echo "Aucun conteneur Docker en cours d'ex√©cution."
            fi
            docker system prune --volumes --force
            echo "DOCKER_USERNAME: $DOCKER_USERNAME"
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "IMAGE_TAG: $IMAGE_TAG"
            docker pull $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG
            docker run -d \
              -p 443:443 \
              -e FMP_API_KEY=${{ secrets.FMP_PRIVATE_KEY }} \
              -e SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
              -e DYNAMO_DB_URL=${{ secrets.DYNAMO_DB_URL }} \
              -e DYNAMO_DB_REGION=${{ secrets.DYNAMO_DB_REGION }} \
              -e AUTH0_AUDIENCE=https://${{ vars.EC2_HOST }} \
              -e AUTH0_ISSUER=https://${{ vars.AUTH0_DOMAIN }}/ \
              -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
              -e DATABASE_CONNECTION_STRING=${{ secrets.DATABASE_CONNECTION_STRING }} \
              $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG


